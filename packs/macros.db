{"_id":"njXjOPCv8xZOXJT0","name":"Council Tracker","type":"script","author":"sYQ3cEKuMdYQMDvv","img":"icons/magic/symbols/symbol-lightning-bolt.webp","scope":"global","command":"//The content of the Dialog box\nconst content = `\n    <form>\n        <h2>Council Success Tracker</h2>\n        <p class='instructions'>Retrieve data from the most recently-created Council by clicking the button below:</p> \n        <div class='tracker'>\n            <button id=\"retrieve\" name=\"retrieve\">Retrieve Council Data from Chat</button>\n            <p class='info' id=\"p1\"></p>\n            <button id=\"success\" class=\"results\" name=\"success\">Add Success</button>\n            <button id=\"fail\" class=\"results\" name=\"fail\">Add Fail</button>\n            <p class='final' id=\"closeText\"></p>\n        </div>\n    </form>\n`;\n\n//CSS Styling for Dialog box content\nconst style = `\n    <style>\n        .dialog.window-app > .window-content {\n\t\t    background: url(ui/parchment.jpg);\n\t\t}\n\t\t.window-app {\n            height: 350px;\n            width: auto;\n        }\n        #success {\n            visibility: hidden;\n        }\n        #fail {\n            visibility: hidden;\n        }\n        button {\n            cursor: pointer;\n        }\n        .tracker {\n            text-align: center;\n        }\n        #retrieve {\n            width: 300px;\n        }\n        .dialog button:active {\n            background: rgba(0, 0, 0, 0.2);\n        }\n        .results {\n            width: 150px;\n            display: inline;\n        }\n        #outcome {\n            visibility: hidden;\n        }\n        .dialog .tracker {\n            margin: 10px 4px;\n        }\n        .dialog h2 {\n            text-align: center;\n            font-size: 1.5rem;\n        }\n        p.instructions {\n            font-size: 1rem;\n            color: #333;\n        }\n        p.final {\n            font-size: .75rem;\n            color: #333;\n            text-align: center;\n            margin-top: 48px;\n        }\n        p.info {\n            font-size: 1.15rem;\n            text-align: center;\n            font-weight: bold;\n        }\n    </style>\n`;\n\nconst SET_VISIBILITY_VISIBLE = 'visible';\nconst SET_VISIBILITY_HIDDEN = 'hidden';\n\nlet timeLimit;\nlet resistVal;\nlet council;\n\nlet successTally = 0;\nlet failTally = 0;\n\nfunction getElements() {\n  const DATA_BTN = document.getElementById('retrieve');\n  const SUCC_BTN = document.getElementById('success');\n  const FAIL_BTN = document.getElementById('fail');\n  const P1_TEXT = document.getElementById('p1');\n  const CLOSE_TEXT = document.getElementById('closeText');\n  return { DATA_BTN, SUCC_BTN, FAIL_BTN, P1_TEXT, CLOSE_TEXT };\n}\n\n//Retrieve the last Council message and return the needed values within\nfunction getCouncil() {\n  const msgs = game.messages.contents;\n  const lastCouncil = [...msgs]\n    .reverse()\n    .find((msg) => msg.data.flags.hasOwnProperty('successes' && 'time-limit'));\n  console.log(lastCouncil);\n\n  if (lastCouncil) {\n    ui.notifications.info('Your Council data has successfully been retrieved.');\n\n    timeLimit = lastCouncil.data.flags['time-limit'];\n    resistVal = lastCouncil.data.flags['successes'];\n    audience = lastCouncil.data.flags['audience'];\n\n    return {\n      'time-limit': timeLimit,\n      target: resistVal,\n      audience: audience,\n    };\n  } else {\n    ui.notifications.error('No Council was found in the chat.');\n  }\n}\n\n//Adds additional text to the Dialog content containing the pertinent Council parameters\nfunction addParameters() {\n  const elem = getElements();\n  const succBtn = elem.SUCC_BTN;\n  const failBtn = elem.FAIL_BTN;\n  const p1 = elem.P1_TEXT;\n  p1.innerText = `Time Limit: ${council['time-limit']} | Successes Needed: ${council['target']}`;\n  succBtn.style.visibility = SET_VISIBILITY_VISIBLE;\n  failBtn.style.visibility = SET_VISIBILITY_VISIBLE;\n}\n\n//When Add Success/Add Failure buttons are pressed, outputs a message to chat that tallies each\nfunction addSuccess() {\n  ++successTally;\n  let chatData = {\n    speaker: ChatMessage.getSpeaker({\n      alias: `Council with ${council.audience}`,\n    }),\n    flags: {\n      'success-tally': successTally,\n      'fail-tally': failTally,\n    },\n    content: `\n                <h2 style=\"text-align: center; color: #33803c;\">Success!</h2>\n                <p><strong>Successes: </strong>${successTally}</p>\n                <p><strong>Failures: </strong>${failTally}</p>\n                <hr>\n                <p><strong>Attempt: </strong>${\n                  successTally + +failTally\n                }/${timeLimit}</p>\n        `,\n  };\n\n  let msg = ChatMessage.create(chatData, {});\n  console.log(msg);\n  checkTally();\n}\n\nfunction addFailure() {\n  ++failTally;\n  let chatData = {\n    speaker: ChatMessage.getSpeaker({\n      alias: `Council with ${council.audience}`,\n    }),\n    flags: {\n      'success-tally': successTally,\n      'fail-tally': failTally,\n    },\n    content: `\n                <h2 style=\"text-align: center; color: #780c0c;\">Fail!</h2>\n                <p><strong>Successes: </strong>${successTally}</p>\n                <p><strong>Failures: </strong>${failTally}</p>\n                <hr>\n                <p><strong>Attempt: </strong>${\n                  successTally + +failTally\n                }/${timeLimit}</p>\n        `,\n  };\n\n  let msg = ChatMessage.create(chatData, {});\n  console.log(msg);\n  checkTally();\n}\n\n//Check when Current Successes = Successes Needed, if so automatically sends Council Success message to chat\nfunction checkTally() {\n  const elem = getElements();\n  if (successTally == resistVal) {\n    let chatData = {\n      speaker: ChatMessage.getSpeaker({\n        alias: `Council with ${council.audience}`,\n      }),\n      content: `\n                    <h2 style=\"text-align: center; color: #33803c;\">Council Success</h2>\n                    <p>You have succeeded in your Council with ${council.audience}!</p>\n            `,\n    };\n\n    let msg = ChatMessage.create(chatData, {});\n    console.log(msg);\n\n    const dataBtn = elem.DATA_BTN;\n    const succBtn = elem.SUCC_BTN;\n    const failBtn = elem.FAIL_BTN;\n    const closeText = elem.CLOSE_TEXT;\n\n    succBtn.style.visibility = SET_VISIBILITY_HIDDEN;\n    failBtn.style.visibility = SET_VISIBILITY_HIDDEN;\n\n    closeText.innerText = `This Council is now complete. Please Close this window.`;\n    closeText.style.visibility = 'visible';\n    dataBtn.style.visibility = SET_VISIBILITY_HIDDEN;\n\n    //If # of total attempts is reached without required number of successes, send Council Failure message to chat\n  } else if (\n    (timeLimit - (successTally + failTally) < resistVal - successTally &&\n      successTally < resistVal) ||\n    (sucessTally + failTally === timeLimit && successTally < resistVal)\n  ) {\n    let chatData = {\n      speaker: ChatMessage.getSpeaker({\n        alias: `Council with ${council.audience}`,\n      }),\n      content: `\n                    <h2 style=\"text-align: center; color: #780c0c;\">Council Failure</h2>\n                    <p>You have failed in your Council with ${council.audience}.</p>\n            `,\n    };\n\n    let msg = ChatMessage.create(chatData, {});\n    console.log(msg);\n\n    const dataBtn = elem.DATA_BTN;\n    const succBtn = elem.SUCC_BTN;\n    const failBtn = elem.FAIL_BTN;\n    const closeText = elem.CLOSE_TEXT;\n\n    succBtn.style.visibility = SET_VISIBILITY_HIDDEN;\n    failBtn.style.visibility = SET_VISIBILITY_HIDDEN;\n\n    closeText.innerText = `This Council is now complete. Please Close this window.`;\n    closeText.style.visibility = SET_VISIBILITY_VISIBLE;\n    dataBtn.style.visibility = SET_VISIBILITY_HIDDEN;\n  }\n}\n\nnew Dialog({\n  title: 'Council Tracker',\n  content: style + content,\n  buttons: {\n    close: {\n      label: 'Close',\n      icon: `<i class=\"fas fa-times\"></i>`,\n    },\n  },\n  render: (html) => {\n    const dataBtn = document.getElementById('retrieve');\n    const succBtn = document.getElementById('success');\n    const failBtn = document.getElementById('fail');\n\n    dataBtn.addEventListener('click', () => {\n      council = getCouncil();\n      addParameters();\n\n      return;\n    });\n    succBtn.addEventListener('click', addSuccess);\n    failBtn.addEventListener('click', addFailure);\n  },\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"sYQ3cEKuMdYQMDvv":3},"flags":{}}
{"_id":"uo7KLiiTXbgFcYJ6","name":"New Council","type":"script","author":"sYQ3cEKuMdYQMDvv","img":"icons/skills/social/diplomacy-handshake-yellow.webp","scope":"global","command":"const content = `\n    <div class=\"text-block\">\n        <h2 style=\"text-align: center\">Create New Council</h2>\n        <h3 class=\"titles\">Audience:</h3>\n        <div class=\"audience\">\n            <label for=\"audience-name\">Council Audience: </label>\n            <input type=\"text\" value=\"Name\" name=\"audience-name\" id=\"audience-name\"/>\n            <hr>\n        <h3 class=\"titles\">Set Resistance:</h3>\n        <div class=\"resist-options\">\n            <span class=\"radios\">\n            <input type=\"radio\" id=\"reasonable\" name=\"resistance\" value=\"Reasonable (3)\">\n                <label>Reasonable (3)</label>\n            </span>\n            <span class=\"radios\">\n            <input type=\"radio\" id=\"bold\" name=\"resistance\" value=\"Bold (6)\">\n                <label>Bold (6)</label>\n            </span>\n            <span class=\"radios\">\n            <input type=\"radio\" id=\"outrageous\" name=\"resistance\" value=\"Outrageous (9)\">\n                <label>Outrageous (9)</label>\n            </span>\n        </div>\n        <hr>\n        <h3 class=\"titles\">Introduction:</h3>\n        <div class=\"introduction\">\n            <label for=\"intro-value\"># of Special Successes: </label>\n            <input type=\"number\" value=\"0\" pattern=\"[0-9]*\" min=\"0\" name=\"intro-value\" id=\"intro-value\"/>\n        </div>\n    </div>\n`;\n\nconst style = `\n    <style>\n        .dialog.window-app > .window-content {\n\t        background: url(ui/parchment.jpg);\n\t    }\n\t    .text-block {\n\t        margin: 10px 4px;\n\t    }\n\t    h3.titles {\n\t        font-size: 1.15rem;\n\t        font-weight: bold;\n\t        margin-top: 16px;\n\t    }\n\t    .dialog input {\n\t        margin: 4px auto 12px auto;\n\t    }\n\t    .dialog .dialog-button:active {\n\t        background: rgba(0, 0, 0, 0.2);\n\t    }\n\t    .dialog .dialog-button:hover {\n\t        cursor: pointer;\n\t    }\n\t    .dialog input[name=\"resistance\"] {\n\t        display: inline;\n\t    }\n\t    .dialog input[name=\"resistance\"]:hover {\n\t        cursor: pointer;\n\t    }\n\t    .resist-options {\n\t        margin: auto;\n\t        width: 100%;\n\t        text-align: center;\n\t        display: flex;\n\t        justify-content: space-evenly;\n\t    }\n\t    .dialog label {\n\t        font-size: 1rem;\n\t    }\n    </style>\n`;\n\nnew Dialog({\n  title: 'New Council',\n  content: style + content,\n  buttons: {\n    ok: {\n      label: 'Send to Chat',\n      icon: `<i class=\"fas fa-check\"></i>`,\n      callback: (html) => {\n        let target = html[0].querySelector('#audience-name').value;\n        let resistLevel = html[0].querySelector(\n          \"input[name='resistance']:checked\"\n        ).value;\n        let resistVal;\n        if (resistLevel === 'Reasonable (3)') {\n          resistVal = 3;\n        } else if (resistLevel === 'Bold (6)') {\n          resistVal = 6;\n        } else if (resistLevel === 'Outrageous (9)') {\n          resistVal = 9;\n        } else {\n          resistVal = 0;\n        }\n        let introBonus = html[0].querySelector('#intro-value').value;\n        let timeLimit = resistVal + +introBonus;\n        let chatData = {\n          speaker: ChatMessage.getSpeaker({ alias: 'New Council' }),\n          flags: {\n            'time-limit': timeLimit,\n            successes: resistVal,\n            audience: target,\n          },\n          content: `\n                        <div class='container'>\n                            <h2 style='text-align: center;'>Council with ${target}</h2>\n                            <p><strong>Resistance Level: </strong>${resistLevel}</p>\n                            <p><strong>Introduction Bonus: </strong>${introBonus}</p><hr>\n                            <p><strong>Total Time Limit: </strong>${timeLimit}</p>\n                        </div>\n                    `,\n        };\n        let msg = ChatMessage.create(chatData, {});\n        console.log(msg);\n\n        game.macros.getName('Council Tracker').execute();\n      },\n    },\n  },\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"sYQ3cEKuMdYQMDvv":3},"flags":{}}
